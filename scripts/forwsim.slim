//    TimeAdapt: joint inference of demography and selection
//    Copyright (C) 2021  Miguel de Navascués, Uppsala universitet, INRAE
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
initialize() {
	if (exists("slimgui")){
		source("tests/input/sim_1.eidos");
	}else{
		source(option_file);
	}
	initializeSLiMOptions(keepPedigrees=T);
	initializeMutationRate(0.0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L);
	initializeRecombinationRate(rates, ends);
	initializeTreeSeq();
	
	defineConstant("verbose",0);
  if (verbose >= 1){
    catn("#########################################");
  }
  if (verbose >= 0) catn("TimeAdapt - forwsim.slim - simulation "+i);
  if (verbose >= 1){
    catn("by Miguel de Navascués");
    catn("INRAE & Uppsala universitet");
    catn("miguel.navascues@inrae.fr");
    catn("#########################################");
  }
}
1 late() {
  sim.readFromPopulationFile("results/"+project+"/"+batch+"/coalsim_"+i+".trees");	
	p0.setSubpopulationSize(N[0]);

	// schedule SAMPLING BLOCK
	sim.setValue("count_sampling", 0);
	sim.rescheduleScriptBlock(s1, start=ts[0], end=ts[0]);
	
	// schedule DEMOGRAPHY BLOCK
	if (length(tc)>0){
	  sim.setValue("count_demography", 0);
	  sim.rescheduleScriptBlock(s2, start=tc[0], end=tc[0]);
	}
	sim.rescheduleScriptBlock(s0, start=2, end=ts[na]);
	
	// schedule CALCULATE Ne BLOCK
	sim.setValue("sum_prob_coal", rep(0.0,np));
	sim.rescheduleScriptBlock(s3, start=3, end=ts[na]);
	
	// schedule FINISH BLOCKS
	sim.rescheduleScriptBlock(s4, start=ts[na], end=ts[na]);
	sim.rescheduleScriptBlock(s5, start=ts[na]+1, end=ts[na]+1);
}

// set previous generation population size
s0 999999 early(){
   sim.setValue("previous_generation_N", p0.individualCount);
   //catn("generation :"+sim.generation);
}

// SAMPLING BLOCK
s1 999999 late() {
	count = sim.getValue("count_sampling");
	sim.treeSeqRememberIndividuals(p0.sampleIndividuals(ss[count]));
	if (count<(na-1)){
		sim.rescheduleScriptBlock(s1, start=ts[count+1], end=ts[count+1]);
	}
	sim.setValue("count_sampling", count+1);

}

// DEMOGRAPHY BLOCK
s2 999999 early(){
	count = sim.getValue("count_demography");
	p0.setSubpopulationSize(N[count+1]);
	if (count<(np-2)){
		sim.rescheduleScriptBlock(s2, start=tc[count+1], end=tc[count+1]);
	}
	sim.setValue("count_demography", count+1);

}

// CALCULATE Ne BLOCK
s3 999999 late() {
	previous_generation_N = sim.getValue("previous_generation_N");

	rescaledParentIDs = p0.individuals.pedigreeParentIDs-min(p0.individuals.pedigreeParentIDs);
	k = tabulate(rescaledParentIDs);
	// add zeros for the individuals at the end that do not contribute offspring:
	k = c(k,rep(0, previous_generation_N-size(k))); 

	prob_coal = sum(k/sum(k)*(k-1)/sum(k)*0.5);// /!\ this is for self-compatible hermaphrodite /!\
	//Ne = 1/prob_coal/2;
	//catn("N(t-1)="+previous_generation_N);
	//catn("N(t)="+p0.individualCount);
	//catn("Ne_coal="+Ne);
	//invNe = (var(k)/mean(k)+mean(k)-1)/(2*p0.individualCount-1);
	//catn("Ne_var="+1/invNe);

	//catn("generation :"+sim.generation);
	//count = sim.getValue("count_demography");
	//catn("count: "+count);
	if (length(tc)==0){
		period = 0;
	}else{
		period = max(which(sim.generation>c(0,tc)));
	}
	//catn("period: "+period);
   	
	sum_prob_coal = sim.getValue("sum_prob_coal");
	sum_prob_coal[period] = prob_coal + sum_prob_coal[period];
	sim.setValue("sum_prob_coal", sum_prob_coal );
}

// FINISH BLOCKS
s4 999999 late() {
	sim.treeSeqRememberIndividuals(p0.sampleIndividuals(ss[na]));
   p0.setSubpopulationSize(0);
}
s5 999999 late() {
	sim.treeSeqOutput(path="results/"+project+"/"+batch+"/forwsim_"+i+".trees");
  lenght_periods = c(tc,ts[na])-c(2,tc);
  if (verbose >= 100) catn(lenght_periods);
	Ne = lenght_periods/sim.getValue("sum_prob_coal")/2;
	if (verbose >= 100) catn("N:");
	if (verbose >= 100) catn(N);
	if (verbose >= 100) catn("Ne:");
	if (verbose >= 100) catn(Ne);
	header="sim";
	for (p in 1:np){
	  header = paste(header,paste0("Ne",p));
	}
	writeFile(filePath="results/"+project+"/"+batch+"/latent_variables_"+i+".txt", contents=header, append=F);
	writeFile(filePath="results/"+project+"/"+batch+"/latent_variables_"+i+".txt", contents=paste(i+" "+paste(Ne)), append=T);
	sim.simulationFinished();
}
